name: Build MedicalLabAnalyzer for All Platforms

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-windows:
    name: Build Windows x64
    runs-on: windows-server-2025
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Restore dependencies
      run: dotnet restore --verbosity normal
    
    - name: Build Windows x64
      run: dotnet build -c Release --no-restore --verbosity normal
    
    - name: Test Windows
      run: dotnet test --no-build --verbosity normal --configuration Release
    
    - name: Publish Windows x64
      run: |
        dotnet publish -c Release -r win-x64 --self-contained true `
          -p:PublishSingleFile=true -p:PublishTrimmed=true `
          -p:DebugType=None -p:DebugSymbols=false `
          -o publish/windows --verbosity normal
    
    - name: Create Windows ZIP
      run: |
        Compress-Archive -Path "publish/windows/*" -DestinationPath "MedicalLabAnalyzer-Windows-x64.zip" -Force
    
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MedicalLabAnalyzer-Windows-x64
        path: MedicalLabAnalyzer-Windows-x64.zip
        retention-days: 30

  build-linux:
    name: Build Linux x64
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgdiplus libc6-dev
    
    - name: Restore dependencies
      run: dotnet restore --verbosity normal
    
    - name: Build Linux x64
      run: dotnet build -c Release --no-restore --verbosity normal
    
    - name: Test Linux
      run: dotnet test --no-build --verbosity normal --configuration Release
    
    - name: Publish Linux x64
      run: |
        dotnet publish -c Release -r linux-x64 --self-contained true \
          -p:PublishSingleFile=true -p:PublishTrimmed=true \
          -p:DebugType=None -p:DebugSymbols=false \
          -o publish/linux --verbosity normal
    
    - name: Make executable
      run: chmod +x publish/linux/MedicalLabAnalyzer
    
    - name: Create Linux TAR.GZ
      run: tar -czf MedicalLabAnalyzer-Linux-x64.tar.gz -C publish/linux .
    
    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MedicalLabAnalyzer-Linux-x64
        path: MedicalLabAnalyzer-Linux-x64.tar.gz
        retention-days: 30

  build-macos:
    name: Build macOS x64
    runs-on: macos-15
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install system dependencies
      run: |
        brew install ffmpeg
        brew install --cask dotnet
    
    - name: Restore dependencies
      run: dotnet restore --verbosity normal
    
    - name: Build macOS x64
      run: dotnet build -c Release --no-restore --verbosity normal
    
    - name: Test macOS
      run: dotnet test --no-build --verbosity normal --configuration Release
    
    - name: Publish macOS x64
      run: |
        dotnet publish -c Release -r osx-x64 --self-contained true \
          -p:PublishSingleFile=true -p:PublishTrimmed=true \
          -p:DebugType=None -p:DebugSymbols=false \
          -o publish/macos --verbosity normal
    
    - name: Make executable
      run: chmod +x publish/macos/MedicalLabAnalyzer
    
    - name: Create macOS TAR.GZ
      run: tar -czf MedicalLabAnalyzer-macOS-x64.tar.gz -C publish/macos .
    
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MedicalLabAnalyzer-macOS-x64
        path: MedicalLabAnalyzer-macOS-x64.tar.gz
        retention-days: 30

  build-macos-arm64:
    name: Build macOS ARM64
    runs-on: macos-15
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install system dependencies
      run: |
        brew install ffmpeg
        brew install --cask dotnet
    
    - name: Restore dependencies
      run: dotnet restore --verbosity normal
    
    - name: Build macOS ARM64
      run: dotnet build -c Release --no-restore --verbosity normal
    
    - name: Test macOS ARM64
      run: dotnet test --no-build --verbosity normal --configuration Release
    
    - name: Publish macOS ARM64
      run: |
        dotnet publish -c Release -r osx-arm64 --self-contained true \
          -p:PublishSingleFile=true -p:PublishTrimmed=true \
          -p:DebugType=None -p:DebugSymbols=false \
          -o publish/macos-arm64 --verbosity normal
    
    - name: Make executable
      run: chmod +x publish/macos-arm64/MedicalLabAnalyzer
    
    - name: Create macOS ARM64 TAR.GZ
      run: tar -czf MedicalLabAnalyzer-macOS-ARM64.tar.gz -C publish/macos-arm64 .
    
    - name: Upload macOS ARM64 Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MedicalLabAnalyzer-macOS-ARM64
        path: MedicalLabAnalyzer-macOS-ARM64.tar.gz
        retention-days: 30

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -f Dockerfile.optimized -t medicallab-analyzer:latest .
        docker images
    
    - name: Upload Docker Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MedicalLabAnalyzer-Docker
        path: medicallab-analyzer:latest
        retention-days: 30

  create-release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos, build-macos-arm64]
    if: github.event_name == 'release'
    timeout-minutes: 15
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release Assets
      run: |
        mkdir -p release-assets
        cp artifacts/MedicalLabAnalyzer-Windows-x64/MedicalLabAnalyzer-Windows-x64.zip release-assets/ || true
        cp artifacts/MedicalLabAnalyzer-Linux-x64/MedicalLabAnalyzer-Linux-x64.tar.gz release-assets/ || true
        cp artifacts/MedicalLabAnalyzer-macOS-x64/MedicalLabAnalyzer-macOS-x64.tar.gz release-assets/ || true
        cp artifacts/MedicalLabAnalyzer-macOS-ARM64/MedicalLabAnalyzer-macOS-ARM64.tar.gz release-assets/ || true
        
        echo "Release assets created:"
        ls -la release-assets/
    
    - name: Upload Release Assets
      uses: actions/upload-artifact@v4
      with:
        name: Release-Assets
        path: release-assets/
        retention-days: 90